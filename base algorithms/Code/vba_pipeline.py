# -*- coding: utf-8 -*-
"""VBA_Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qq3b5RHLsZf51TR7RpsojqIqA85vM-3W
"""

import re
import numpy as np
import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.feature_selection import SelectFromModel
import matplotlib.pyplot as plt
import seaborn as sns

# Preprocessing function
def preprocess_vba_code(code):
    """
    Preprocessing the vba code by removing unnecessary characters and spaces.
    """
    # remove comments
    code = re.sub(r"'.*?$", '', code, flags=re.MULTILINE)
    code = re.sub(r"Rem .*?$", '', code, flags=re.MULTILINE)

    # remove newline and tabs
    code = code.replace('\n', ' ').replace('\t', ' ')

    # remove punctuation and symbols
    code = re.sub(r'[.(\){}[\]<>,;:"\'!@#$%^&*+=|\\/?!~`]', ' ', code)

    # replace multiple spaces with a single space
    code = re.sub(r'\s+', ' ', code)

    # convert to lowercase for uniformity
    code = code.lower()

    # list of common VBA keywords and generic variable names to remove
    keywords = ['sub', 'end', 'if', 'then', 'else', 'dim', 'as', 'private', 'public', 'msgbox', 'set', 'for', 'next', 'do', 'while', 'loop', 'integer', 'boolean', 'string', 'goto', 'on error', 'fname', 'ans', 'msg']

    # Remove keywords
    for keyword in keywords:
        code = re.sub(r'\b' + keyword + r'\b', '', code)

    return code.strip()

# Custom transformer for preprocessing
class PreprocessTransformer():
    def __init__(self, model, vectorizer):
        self.model = model
        self.vectorizer = vectorizer

    def fit(self, X, y=None):
        return self

    def transform(self, X, y=None):
        return [preprocess_vba_code(text) for text in X]

# Main pipeline function
def create_pipeline(model, vectorizer):
    pipeline = Pipeline([
        ('preprocess', PreprocessTransformer(model, vectorizer)),
        ('vectorizer', vectorizer),
        ('scaler', StandardScaler()),
        ('model', SelectFromModel(model))
    ])
    return pipeline

# Function to evaluate the model
def evaluate_model(pipeline, X_test, y_test):
    y_pred = pipeline.predict(X_test)

    # Print confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    print("Confusion Matrix:")
    print(cm)

    # Print classification report
    cr = classification_report(y_test, y_pred)
    print("Classification Report:")
    print(cr)

    # Plot boxplot
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=[y_test, y_pred], palette="Set3")
    plt.title("Boxplot of Actual vs Predicted Labels")
    plt.show()

